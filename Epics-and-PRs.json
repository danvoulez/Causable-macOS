{
  "project": "Causable Conductor for macOS",
  "version": "1.0.0",
  "epics": [
    {
      "id": "EPIC-MAC-001",
      "title": "Foundation: Core Services, SDK Nativo e Outbox Resiliente",
      "status": "todo",
      "owner": "Founder",
      "description": "Estabelecer a fundação técnica da aplicação nativa para macOS. O objetivo é construir um núcleo robusto e seguro para comunicação com o LogLineOS Cloud, gerenciamento de chaves criptográficas e persistência offline. Esta fase foca na infraestrutura, sem construir UI principal, garantindo que a base seja sólida antes de adicionar features.",
      "user_stories": [
        "Como desenvolvedor, eu quero um SDK Swift nativo que lide com networking, criptografia e serialização para que eu possa interagir com o LogLineOS Cloud de forma segura e consistente.",
        "Como usuário, quero que a aplicação gere e armazene minhas chaves de dispositivo de forma segura no Keychain/Secure Enclave para garantir que apenas eu possa assinar meus spans.",
        "Como usuário, quero que a aplicação funcione offline, enfileirando minhas ações em um outbox persistente para enviá-las assim que a conexão for restaurada."
      ],
      "acceptance_criteria": [
        "O SDK Swift pode ser compilado como um framework independente.",
        "A aplicação gera um par de chaves Ed25519 no primeiro launch e o armazena no Keychain.",
        "O SDK consegue assinar um span, enviá-lo para um outbox (SQLite), e o outbox consegue drenar a fila com sucesso para um endpoint mock.",
        "O processo de enrollment (`POST /api/enroll`) funciona e o token recebido é armazenado de forma segura."
      ],
      "related_prs": [
        "PR-MAC-101",
        "PR-MAC-102"
      ]
    },
    {
      "id": "EPIC-MAC-002",
      "title": "Observer: Coleta Passiva de Contexto e Menu Bar App",
      "status": "todo",
      "owner": "Founder",
      "description": "Implementar a funcionalidade de 'Passive Observer'. O objetivo é criar uma aplicação de menu bar leve e de baixo impacto que monitora a atividade do usuário (com consentimento e privacidade em primeiro lugar), transforma essa atividade em spans `activity` e os envia para o Notary Core (XPC) para registro no ledger. Esta é a primeira feature visível para o usuário.",
      "user_stories": [
        "Como usuário, eu quero uma aplicação de menu bar discreta que me mostre o status da conexão com o Causable Cloud.",
        "Como usuário, quero que a aplicação capture o contexto do meu trabalho (ex: qual app e documento estou usando) para criar uma timeline pessoal e auditável.",
        "Como usuário, quero poder pausar/retomar a observação a qualquer momento para controlar minha privacidade."
      ],
      "acceptance_criteria": [
        "A aplicação aparece como um ícone na menu bar do macOS.",
        "A aplicação detecta mudanças de foco entre aplicativos e janelas.",
        "Spans do tipo `activity` são gerados e enviados via XPC para o Notary Core.",
        "O consumo de CPU em idle é < 1%.",
        "Controles para pausar/retomar a observação estão funcionais."
      ],
      "related_prs": [
        "PR-MAC-201",
        "PR-MAC-202"
      ]
    },
    {
      "id": "EPIC-MAC-003",
      "title": "Conductor UI: Timeline Canvas e Inspector",
      "status": "todo",
      "owner": "Founder",
      "description": "Construir a interface principal do 'Causable Conductor': a 'Observe Desk'. O foco é criar uma experiência de visualização de ledger superior, substituindo uma simples lista por um canvas infinito e interativo que visualiza a causalidade entre os spans. Esta é a 'killer feature' que torna o ledger tangível e intuitivo.",
      "user_stories": [
        "Como desenvolvedor, eu quero visualizar minha timeline de spans em um canvas infinito com zoom e pan para navegar pela história do meu sistema.",
        "Como desenvolvedor, quero que spans relacionados por um `trace_id` sejam agrupados visualmente para que eu possa entender o fluxo de uma operação.",
        "Como desenvolvedor, quero clicar em qualquer span para ver seus detalhes completos em um painel de inspetor nativo e polido."
      ],
      "acceptance_criteria": [
        "A aplicação principal renderiza uma view com SwiftUI que consome o stream SSE.",
        "Spans são desenhados no canvas, com o eixo X representando o tempo.",
        "O usuário pode fazer zoom in/out e pan no canvas.",
        "Clicar em um span abre um painel lateral (Inspector) com seus dados formatados.",
        "A UI é fluida e performática, mesmo com milhares de spans."
      ],
      "related_prs": [
        "PR-MAC-301",
        "PR-MAC-302"
      ]
    }
  ],
  "prs": [
    {
      "id": "PR-MAC-101",
      "epic_id": "EPIC-MAC-001",
      "title": "feat(sdk): Implementar SDK Swift Nativo com Criptografia e Outbox",
      "status": "todo",
      "author": "Developer",
      "description": "Cria o framework Swift `@CausableSDK` que servirá como a espinha dorsal de toda a aplicação. Implementa as primitivas de criptografia, a lógica de rede resiliente e o outbox de persistência.",
      "tasks": [
        "Definir a estrutura do pacote Swift (`Package.swift`).",
        "Implementar as `structs` Swift para o `SpanEnvelope` e outros contratos, garantindo conformidade com o `Codable`.",
        "Criar o `SpanSigner` usando `CryptoKit` para Ed25519, com uma camada de abstração para o Secure Enclave.",
        "Implementar o `OutboxStore` usando `SQLite.swift` para criar e gerenciar o banco de dados local do outbox.",
        "Implementar o `CausableClient` usando `URLSession` com `async/await` para os métodos `ingest` e `fetchManifest`.",
        "Adicionar testes unitários para a canonicalização de JSON, assinatura/verificação e a máquina de estados do outbox."
      ],
      "testing_plan": "Verificar se o SDK compila como um framework. Executar testes unitários que provem que um span pode ser criado, assinado, armazenado no outbox, e que uma tentativa de envio é feita corretamente.",
      "affected_packages": ["CausableSDK"]
    },
    {
      "id": "PR-MAC-102",
      "epic_id": "EPIC-MAC-001",
      "title": "feat(core): Implementar o Notary XPC Service e Enrollment",
      "status": "todo",
      "author": "Developer",
      "description": "Cria o serviço XPC, o limite de segurança da aplicação. Este serviço será o único processo com acesso ao Keychain e responsável por toda a comunicação de escrita com o Cloud.",
      "tasks": [
        "Criar um novo target na aplicação Xcode para o XPC Service (`dev.causable.notary`).",
        "Definir a interface `@objc protocol NotaryXPC`.",
        "Implementar o serviço para que ele inicialize e gerencie o `CausableClient` e o `OutboxStore` do SDK.",
        "Expor o método `enqueueSpan` que recebe um span, o assina e o coloca no outbox.",
        "Implementar o fluxo de enrollment: no primeiro launch, o serviço cria as chaves, chama `POST /api/enroll`, e armazena o token recebido no Keychain do macOS."
      ],
      "testing_plan": "Construir a aplicação principal (ainda vazia) e verificar se o serviço XPC é lançado. Chamar o método de health do XPC e verificar se ele retorna um status 'OK'.",
      "affected_packages": ["CausableConductor.app", "NotaryXPCService"],
      "dependencies": ["PR-MAC-101"]
    },
    {
      "id": "PR-MAC-201",
      "epic_id": "EPIC-MAC-002",
      "title": "feat(observer): Construir o Menu Bar App Básico e a Lógica de Amostragem",
      "status": "todo",
      "author": "Developer",
      "description": "Cria a parte visível do Observer: o ícone na menu bar e a UI principal. Implementa a lógica para monitorar a atividade do sistema de forma eficiente e com foco em privacidade.",
      "tasks": [
        "Configurar a aplicação principal para rodar como um `LSUIElement` (sem ícone no Dock).",
        "Usar SwiftUI para criar o menu que abre ao clicar no ícone da menu bar.",
        "Adicionar itens de menu para 'Status', 'Pausar Observador' e 'Sair'.",
        "Implementar a lógica de amostragem usando `NSWorkspace.shared.notificationCenter` para `didActivateApplicationNotification`.",
        "Implementar um fallback de polling (a cada 15s) usando `CGWindowListCopyWindowInfo` para obter títulos de janelas.",
        "Criar e aplicar uma lista de redação de padrões para títulos de janela sensíveis."
      ],
      "testing_plan": "Rodar a aplicação. Verificar se o ícone aparece na menu bar. Mudar de aplicativo e verificar se a saída do console loga as mudanças de foco. Verificar se os títulos de janela sensíveis (ex: 'Password') são redigidos.",
      "affected_packages": ["CausableConductor.app"],
      "dependencies": ["PR-MAC-102"]
    },
    {
      "id": "PR-MAC-202",
      "epic_id": "EPIC-MAC-002",
      "title": "feat(observer): Conectar Menu Bar ao Notary XPC e Emitir Spans",
      "status": "todo",
      "author": "Developer",
      "description": "Conecta o Observer (UI) ao Notary (núcleo de segurança). Cada evento de atividade detectado será transformado em um span e enviado de forma segura para o serviço XPC para ser enfileirado e enviado.",
      "tasks": [
        "Na aplicação de menu bar, estabelecer uma conexão com o serviço XPC.",
        "Para cada evento de atividade detectado (ex: `didActivateApplicationNotification`), construir um `SpanEnvelope` do tipo `activity`.",
        "Serializar o span para `Data` e chamar o método `enqueueSpan` do proxy XPC.",
        "Implementar o feedback na UI da menu bar para mostrar o tamanho atual do outbox (ex: '3 spans pendentes')."
      ],
      "testing_plan": "Rodar a aplicação. Mudar de aplicativo várias vezes. Desligar a internet. Verificar se o contador de 'spans pendentes' na UI aumenta. Ligar a internet e verificar se o contador zera após algum tempo.",
      "affected_packages": ["CausableConductor.app", "NotaryXPCService"],
      "dependencies": ["PR-MAC-201"]
    },
    {
      "id": "PR-MAC-301",
      "epic_id": "EPIC-MAC-003",
      "title": "feat(ui): Implementar o Cliente SSE e a View da Timeline",
      "status": "todo",
      "author": "Developer",
      "description": "Constrói a fundação da 'Observe Desk'. Implementa o cliente SSE para receber o feed de spans em tempo real e uma view básica que renderiza esses spans em uma lista.",
      "tasks": [
        "No SDK, implementar o `SSEClient` usando `URLSession` e `AsyncThrowingStream` para consumir o endpoint `/api/timeline/stream`.",
        "Criar a view principal da aplicação (`ConductorView.swift`) usando SwiftUI.",
        "Na view, inicializar o `SSEClient` e começar a consumir o stream.",
        "Para cada span recebido, adicioná-lo a um array de estado (`@State private var spans`).",
        "Renderizar os spans em uma `List` ou `ScrollView` de SwiftUI, mostrando o `who`, `did`, `this` de cada um."
      ],
      "testing_plan": "Rodar a aplicação e abrir a janela principal. Manualmente inserir um span no banco de dados. Verificar se o novo span aparece na lista da UI em tempo real.",
      "affected_packages": ["CausableSDK", "CausableConductor.app"],
      "dependencies": ["PR-MAC-101"]
    },
    {
      "id": "PR-MAC-302",
      "epic_id": "EPIC-MAC-003",
      "title": "feat(ui): Transformar a Lista em um Canvas Interativo com Inspector",
      "status": "todo",
      "author": "Developer",
      "description": "Evolui a lista de spans para a visão final do 'Infinite Canvas'. Implementa a renderização customizada, interações de pan/zoom e o painel de inspetor de detalhes.",
      "tasks": [
        "Substituir a `List` por uma `Canvas` de SwiftUI.",
        "Dentro do canvas, renderizar cada span como uma forma (`Shape`) customizada.",
        "Implementar gestos de `DragGesture` (pan) e `MagnificationGesture` (zoom).",
        "Adicionar um `TimelineView` que agrupa spans por `trace_id` em 'lanes' horizontais.",
        "Implementar a lógica para, ao clicar em um span no canvas, exibir um `Inspector` (painel lateral) com todos os dados do span formatados.",
        "Adicionar os conectores visuais entre spans com `parent_id`."
      ],
      "testing_plan": "Verificar se o pan e zoom funcionam de forma fluida. Inserir múltiplos spans com o mesmo `trace_id` e verificar se eles são agrupados na mesma 'lane'. Clicar em um span e verificar se o inspector exibe os dados corretos.",
      "affected_packages": ["CausableConductor.app"],
      "dependencies": ["PR-MAC-301"]
    }
  ]
}